name: Build and Deploy Debian Package

on:
  push:
    branches:
      - main  # 'main' 브랜치에 푸시될 때 워크플로우 실행

jobs:
  # --- 잡 1: 데비안 패키지 빌드 (변경 없음) ---
  build:
    name: Build Debian Package
    runs-on: ubuntu-latest
    outputs:
      deb_filename: ${{ steps.build_package.outputs.deb_filename }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare build directory
        run: |
          # dpkg-deb가 요구하는 구조로 빌드 디렉토리를 생성합니다.
          mkdir -p build_dir/usr/bin
          mkdir -p build_dir/etc
          
          # 리포지토리의 파일들을 빌드 디렉토리 안의 최종 설치 경로로 복사합니다.
          cp bin/test.sh build_dir/usr/bin/
          cp etc/test.conf build_dir/etc/
          
          # DEBIAN 디렉토리와 그 안의 control 파일을 복사합니다.
          cp -r DEBIAN build_dir/

          # 실행 파일에 실행 권한을 부여합니다.
          chmod +x build_dir/usr/bin/test.sh

      - name: Build the package with dpkg-deb
        id: build_package
        run: |
          # DEBIAN/control 파일에서 패키지 이름과 버전을 동적으로 읽어옵니다.
          PACKAGE_NAME=$(grep -oP '^Package: \K.*' DEBIAN/control | tr -d '[:space:]')
          PACKAGE_VERSION=$(grep -oP '^Version: \K.*' DEBIAN/control | tr -d '[:space:]')
          ARCHITECTURE=$(grep -oP '^Architecture: \K.*' DEBIAN/control | tr -d '[:space:]')
          
          # 최종.deb 파일 이름을 생성합니다.
          DEB_FILENAME="${PACKAGE_NAME}_${PACKAGE_VERSION}_${ARCHITECTURE}.deb"
          echo "Building package as: ${DEB_FILENAME}"
          
          # dpkg-deb 명령으로 패키지를 빌드합니다.
          dpkg-deb --build build_dir "${DEB_FILENAME}"

          # 다음 잡에서 파일 이름을 사용할 수 있도록 output으로 설정합니다.
          echo "deb_filename=${DEB_FILENAME}" >> "$GITHUB_OUTPUT"

      - name: Upload.deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: ${{ steps.build_package.outputs.deb_filename }}

  # --- 잡 2: APT 저장소 배포 (상태 유지 로직으로 수정됨) ---
  deploy:
    name: Deploy APT Repository
    needs: build  # 'build' 잡이 성공해야 실행됨
    permissions:
      pages: write      # GitHub Pages에 배포하기 위한 권한
      id-token: write   # OIDC 토큰을 사용한 인증을 위한 권한
      contents: read    # 기존 저장소 상태를 가져오기 위해 브랜치를 체크아웃할 권한
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # 1. 이전 잡에서 빌드한 새로운 .deb 패키지를 다운로드합니다.
      - name: Download .deb artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          path: ./new_package # 임시 하위 디렉토리에 다운로드

      # 2. 현재 배포된 GitHub Pages의 내용을 체크아웃하여 기존 저장소 상태를 가져옵니다.
      #    결과물은 'repo_dir' 디렉토리에 저장됩니다.
      #    최초 실행 시 gh-pages 브랜치가 없을 수 있으므로 오류가 발생해도 계속 진행합니다.
      - name: Checkout existing gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: repo_dir
        continue-on-error: true

      # 3. 데비안 저장소 관리 도구인 reprepro를 설치합니다.
      - name: Install reprepro
        run: sudo apt-get update && sudo apt-get install -y reprepro

      # 4. 저장소 서명을 위해 GitHub Secrets에 저장된 GPG 개인키를 가져옵니다.
      - name: Import GPG Key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          # 키에 암호가 있는 경우 아래 줄의 주석을 해제하고 GitHub Secret에 GPG_PASSPHRASE를 추가하세요.
          # passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # 5. 저장소 구조와 설정 파일을 준비합니다.
      #    이 단계는 최초 실행을 포함하여 항상 필요한 디렉토리와 설정 파일이 있도록 보장합니다.
      - name: Prepare repository structure
        run: |
          # 기본 디렉토리와 conf 하위 디렉토리가 존재하는지 확인하고 없으면 생성합니다.
          mkdir -p repo_dir/conf
          
          # reprepro 설정 파일을 동적으로 생성합니다.
          # 이 과정에서 이전 스텝에서 가져온 GPG 키 ID를 주입하여 서명을 활성화합니다.
          cat <<EOF > repo_dir/conf/distributions
          Origin: ${{ github.repository_owner }}
          Label: ${{ github.event.repository.name }}
          Codename: stable
          Components: main
          Architectures: amd64 all
          Description: APT repository for ${{ github.event.repository.name }}
          SignWith: ${{ steps.import_gpg.outputs.keyid }}
          EOF

      # 6. 새로 빌드된 패키지를 저장소에 추가합니다.
      #    reprepro는 'repo_dir' 안의 데이터베이스를 업데이트하고 새로운 .deb 파일을 pool에 추가합니다.
      - name: Add new package to repository
        run: |
          reprepro --basedir ./repo_dir -V includedeb stable ./new_package/*.deb

      # 7. 업데이트된 전체 저장소 디렉토리를 Pages 아티팩트로 업로드합니다.
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./repo_dir

      # 8. 업로드된 아티팩트를 GitHub Pages에 배포합니다.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
