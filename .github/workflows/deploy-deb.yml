name: Build and Deploy Debian Package

on:
  push:
    branches:
      - main  # 'main' 브랜치에 푸시될 때 워크플로우 실행

jobs:
  # --- 잡 1: 데비안 패키지 빌드 (변경 없음) ---
  build:
    name: Build Debian Package
    runs-on: ubuntu-latest
    outputs:
      deb_filename: ${{ steps.build_package.outputs.deb_filename }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare build directory
        run: |
          # dpkg-deb가 요구하는 구조로 빌드 디렉토리를 생성합니다.
          mkdir -p build_dir/usr/bin
          mkdir -p build_dir/etc
          
          # 리포지토리의 파일들을 빌드 디렉토리 안의 최종 설치 경로로 복사합니다.
          cp bin/test.sh build_dir/usr/bin/
          cp etc/test.conf build_dir/etc/
          
          # DEBIAN 디렉토리와 그 안의 control 파일을 복사합니다.
          cp -r DEBIAN build_dir/

          # 실행 파일에 실행 권한을 부여합니다.
          chmod +x build_dir/usr/bin/test.sh

      - name: Build the package with dpkg-deb
        id: build_package
        run: |
          # DEBIAN/control 파일에서 패키지 이름과 버전을 동적으로 읽어옵니다.
          PACKAGE_NAME=$(grep -oP '^Package: \K.*' DEBIAN/control | tr -d '[:space:]')
          PACKAGE_VERSION=$(grep -oP '^Version: \K.*' DEBIAN/control | tr -d '[:space:]')
          ARCHITECTURE=$(grep -oP '^Architecture: \K.*' DEBIAN/control | tr -d '[:space:]')
          
          # 최종.deb 파일 이름을 생성합니다.
          DEB_FILENAME="${PACKAGE_NAME}_${PACKAGE_VERSION}_${ARCHITECTURE}.deb"
          echo "Building package as: ${DEB_FILENAME}"
          
          # dpkg-deb 명령으로 패키지를 빌드합니다.
          dpkg-deb --build build_dir "${DEB_FILENAME}"

          # 다음 잡에서 파일 이름을 사용할 수 있도록 output으로 설정합니다.
          echo "deb_filename=${DEB_FILENAME}" >> "$GITHUB_OUTPUT"

      - name: Upload.deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: ${{ steps.build_package.outputs.deb_filename }}

  # --- 잡 2: APT 저장소 배포 (셸 명령어로 수정됨) ---
  deploy:
    name: Deploy APT Repository
    needs: build  # 'build' 잡이 성공해야 실행됨
    permissions:
      pages: write      # GitHub Pages에 배포하기 위한 권한
      id-token: write   # OIDC 토큰을 사용한 인증을 위한 권한
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download.deb artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package

      - name: Install reprepro
        run: sudo apt-get update && sudo apt-get install -y reprepro

      - name: Import GPG Key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          # 키에 암호가 있는 경우 아래 줄의 주석을 해제하고 GitHub Secret에 GPG_PASSPHRASE를 추가하세요.
          # passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create repository using reprepro
        run: |
          # 최종적으로 GitHub Pages에 배포될 디렉토리를 생성합니다.
          mkdir -p public_repo/conf

          # reprepro 설정 파일을 동적으로 생성합니다.
          # SignWith 값에 GitHub Secrets에서 가져온 GPG 키의 ID를 주입합니다.
          cat <<EOF > public_repo/conf/distributions
          Origin: ${{ github.repository_owner }}
          Label: ${{ github.event.repository.name }}
          Codename: stable
          Components: main
          Architectures: amd64 all
          Description: APT repository for ${{ github.event.repository.name }}
          SignWith: ${{ steps.import_gpg.outputs.keyid }}
          EOF

          echo "--- Generated distributions file: ---"
          cat public_repo/conf/distributions
          echo "------------------------------------"

          # 다운로드한 .deb 패키지를 저장소에 추가합니다.
          # reprepro는 자동으로 pool과 dists 디렉토리를 생성하고 메타데이터 파일을 업데이트 및 서명합니다.
          reprepro --basedir ./public_repo -V includedeb stable ./*.deb

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # reprepro가 생성한 디렉토리 전체를 아티팩트로 업로드합니다.
          path: './public_repo'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
