name: Build and Deploy Debian Package

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: source
        
      # 2. 필요한 도구 설치
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev reprepro
          
      # 3. GPG 키 가져오기
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          
      # 4. 빌드 스크립트 실행
      - name: Build Debian package
        working-directory: source
        run: |
          #!/bin/bash
          set -e
          
          echo "=== Starting Debian package build ==="
          
          # DEBIAN/control에서 패키지 정보 추출
          PACKAGE_NAME=$(grep '^Package:' DEBIAN/control | awk '{print $2}')
          PACKAGE_VERSION=$(grep '^Version:' DEBIAN/control | awk '{print $2}')
          PACKAGE_ARCH=$(grep '^Architecture:' DEBIAN/control | awk '{print $2}')
          
          echo "Building: ${PACKAGE_NAME}_${PACKAGE_VERSION}_${PACKAGE_ARCH}"
          
          # 패키지 구조 생성
          BUILD_DIR="build_${PACKAGE_NAME}"
          rm -rf "${BUILD_DIR}"
          mkdir -p "${BUILD_DIR}"
          
          # DEBIAN 디렉토리 복사
          cp -r DEBIAN "${BUILD_DIR}/"
          
          # 파일 복사
          if [ -d "usr" ]; then
            cp -r usr "${BUILD_DIR}/"
          fi
          
          if [ -d "etc" ]; then
            cp -r etc "${BUILD_DIR}/"
          fi
          
          if [ -d "bin" ]; then
            mkdir -p "${BUILD_DIR}/usr/bin"
            cp -r bin/* "${BUILD_DIR}/usr/bin/"
            chmod +x "${BUILD_DIR}/usr/bin/"*
          fi
          
          # .deb 파일 빌드
          DEB_FILENAME="${PACKAGE_NAME}_${PACKAGE_VERSION}_${PACKAGE_ARCH}.deb"
          dpkg-deb --build "${BUILD_DIR}" "${DEB_FILENAME}"
          
          echo "Package built: ${DEB_FILENAME}"
          
          # 빌드된 파일을 상위 디렉토리로 복사
          cp "${DEB_FILENAME}" ../
          
          # 환경변수 설정
          echo "DEB_FILENAME=${DEB_FILENAME}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          
      # 5. gh-pages 브랜치 체크아웃
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true
        
      # 6. gh-pages 디렉토리 초기화 (필요시)
      - name: Initialize gh-pages directory
        run: |
          if [ ! -d "gh-pages" ]; then
            echo "Creating gh-pages directory..."
            mkdir -p gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            cd ..
          fi
          
      # 7. APT 저장소 업데이트 (이전 버전 유지)
      - name: Update APT repository (keeping old versions)
        working-directory: gh-pages
        run: |
          #!/bin/bash
          set -e
          
          echo "=== Updating APT repository ==="
          
          # .deb 파일 복사
          cp ../${DEB_FILENAME} .
          
          # reprepro 설정 디렉토리 생성
          mkdir -p conf
          
          # distributions 파일 생성/업데이트
          cat > conf/distributions <<EOF
          Origin: ${GITHUB_REPOSITORY_OWNER}
          Label: ${GITHUB_REPOSITORY##*/}
          Codename: stable
          Architectures: amd64 arm64 armhf i386
          Components: main
          Description: APT repository for ${GITHUB_REPOSITORY##*/}
          SignWith: ${{ steps.import_gpg.outputs.keyid }}
          EOF
          
          # options 파일 생성 (verbose 출력)
          cat > conf/options <<EOF
          verbose
          basedir .
          EOF
          
          # 저장소가 이미 존재하는지 확인
          if [ -d "pool" ] && [ -d "dists" ]; then
            echo "Repository exists, updating..."
            
            # 동일한 버전이 이미 있는지 확인
            if reprepro list stable | grep -q "${PACKAGE_NAME}_${PACKAGE_VERSION}"; then
              echo "Version ${PACKAGE_VERSION} already exists. Removing old version first..."
              # 기존 버전 제거
              reprepro -V remove stable ${PACKAGE_NAME} ${PACKAGE_VERSION}
            fi
            
            # 새 패키지 추가
            reprepro -V includedeb stable "${DEB_FILENAME}"
          else
            echo "Creating new repository..."
            # 새 저장소 생성
            reprepro -V includedeb stable "${DEB_FILENAME}"
          fi
          
          # 저장소 상태 확인
          echo ""
          echo "=== Repository Status ==="
          reprepro list stable
          echo ""
          
          # 오래된 버전 제거 옵션 (선택적)
          # 최대 3개 버전만 유지하려면 아래 주석 해제
          # echo "Removing old versions (keeping last 3)..."
          # reprepro --delete clearvanished
          # reprepro deleteunreferenced
          
      # 8. Public GPG 키 내보내기
      - name: Export public GPG key
        working-directory: gh-pages
        run: |
          echo "Exporting GPG public key..."
          gpg --armor --export ${{ steps.import_gpg.outputs.keyid }} > public.key
          
          if [ ! -s public.key ]; then
            echo "ERROR: public.key is empty!"
            gpg --armor --export > public.key
          fi
          
          echo "Public key file size: $(wc -c < public.key) bytes"
          
      # 9. 문서 업데이트
      - name: Update documentation
        working-directory: gh-pages
        run: |
          # 현재 저장소의 모든 패키지 목록 가져오기
          PACKAGE_LIST=$(reprepro list stable | awk '{print $2}' | sort -u)
          
          # README.md 업데이트
          cat > README.md <<EOF
          # APT Repository for ${GITHUB_REPOSITORY##*/}
          
          ## Installation
          
          ### Add GPG key and repository
          \`\`\`bash
          # Modern way (Ubuntu 22.04+, Debian 11+)
          curl -fsSL https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/public.key | sudo gpg --dearmor -o /etc/apt/keyrings/${GITHUB_REPOSITORY##*/}.gpg
          echo "deb [signed-by=/etc/apt/keyrings/${GITHUB_REPOSITORY##*/}.gpg] https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/ stable main" | sudo tee /etc/apt/sources.list.d/${GITHUB_REPOSITORY##*/}.list
          
          # Legacy way (older systems)
          curl -fsSL https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/public.key | sudo apt-key add -
          echo "deb https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/ stable main" | sudo tee /etc/apt/sources.list.d/${GITHUB_REPOSITORY##*/}.list
          \`\`\`
          
          ### Install package
          \`\`\`bash
          sudo apt update
          sudo apt install ${PACKAGE_NAME}
          \`\`\`
          
          ### Install specific version
          \`\`\`bash
          # List available versions
          apt-cache madison ${PACKAGE_NAME}
          
          # Install specific version
          sudo apt install ${PACKAGE_NAME}=VERSION
          \`\`\`
          
          ## Available Packages
          
          \`\`\`
          $(reprepro list stable)
          \`\`\`
          
          Last updated: $(date)
          EOF
          
          # index.html 업데이트
          cat > index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>APT Repository - ${GITHUB_REPOSITORY##*/}</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; 
                      max-width: 900px; 
                      margin: 0 auto; 
                      padding: 40px 20px; 
                      background: #f5f5f5;
                  }
                  .container {
                      background: white;
                      border-radius: 8px;
                      padding: 30px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  pre { 
                      background: #f6f8fa; 
                      padding: 16px; 
                      border-radius: 6px; 
                      overflow-x: auto;
                      border: 1px solid #e1e4e8;
                  }
                  code { 
                      background: #f6f8fa; 
                      padding: 2px 6px; 
                      border-radius: 3px;
                      font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
                  }
                  h1 { 
                      border-bottom: 2px solid #e1e4e8; 
                      padding-bottom: 10px;
                      color: #24292e;
                  }
                  h2 {
                      color: #24292e;
                      margin-top: 30px;
                  }
                  .package-info {
                      background: #f0f9ff;
                      border: 1px solid #0969da;
                      border-radius: 6px;
                      padding: 15px;
                      margin: 20px 0;
                  }
                  .version-list {
                      background: #f6f8fa;
                      border-radius: 6px;
                      padding: 15px;
                      margin: 15px 0;
                  }
                  a {
                      color: #0969da;
                      text-decoration: none;
                  }
                  a:hover {
                      text-decoration: underline;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>📦 APT Repository</h1>
                  <p>Debian package repository for <strong>${GITHUB_REPOSITORY##*/}</strong></p>
                  
                  <div class="package-info">
                      <strong>📋 Latest Version:</strong> ${PACKAGE_VERSION}<br>
                      <strong>📦 Package Name:</strong> ${PACKAGE_NAME}<br>
                      <strong>🔄 Total Versions:</strong> $(reprepro list stable | wc -l)
                  </div>
                  
                  <h2>🚀 Quick Setup</h2>
                  <pre><code># For Ubuntu 22.04+ / Debian 11+
          curl -fsSL https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/public.key | \\
            sudo gpg --dearmor -o /etc/apt/keyrings/${GITHUB_REPOSITORY##*/}.gpg
          
          echo "deb [signed-by=/etc/apt/keyrings/${GITHUB_REPOSITORY##*/}.gpg] \\
            https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/ stable main" | \\
            sudo tee /etc/apt/sources.list.d/${GITHUB_REPOSITORY##*/}.list
          
          sudo apt update
          sudo apt install ${PACKAGE_NAME}</code></pre>
                  
                  <h2>📦 Available Versions</h2>
                  <div class="version-list">
                      <pre>$(reprepro list stable)</pre>
                  </div>
                  
                  <h2>🔧 Version Management</h2>
                  <pre><code># List available versions
          apt-cache madison ${PACKAGE_NAME}
          
          # Install specific version
          sudo apt install ${PACKAGE_NAME}=1.0-1
          
          # Downgrade to older version
          sudo apt install ${PACKAGE_NAME}=0.9-1 --allow-downgrades</code></pre>
                  
                  <h2>📁 Browse Repository</h2>
                  <ul>
                      <li><a href="pool/">📦 Package Pool</a> - All .deb files</li>
                      <li><a href="dists/">📋 Distributions</a> - Repository metadata</li>
                      <li><a href="public.key">🔑 GPG Public Key</a> - Repository signing key</li>
                  </ul>
                  
                  <hr>
                  <p><small>Last updated: $(date)</small></p>
              </div>
          </body>
          </html>
          EOF
          
      # 10. 변경사항 커밋 및 푸시
      - name: Commit and push to gh-pages
        working-directory: gh-pages
        run: |
          echo "=== Files to be committed ==="
          ls -la
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .
          git status
          
          # 커밋 메시지에 버전 정보 포함
          git commit -m "Add ${PACKAGE_NAME} version ${PACKAGE_VERSION}" || echo "No changes to commit"
          
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git 2>/dev/null || true
          git push -f origin gh-pages
          
      # 11. GitHub Pages 활성화
      - name: Enable GitHub Pages
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/pages" \
            -d '{"source":{"branch":"gh-pages","path":"/"}}' \
            2>/dev/null || echo "GitHub Pages already enabled"
            
      # 12. 완료 메시지
      - name: Display completion message
        run: |
          echo "=========================================="
          echo "✅ Deployment Complete!"
          echo "=========================================="
          echo "📦 Package: ${DEB_FILENAME}"
          echo "📋 Version: ${PACKAGE_VERSION}"
          echo "🌐 Repository: https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/"
          echo ""
          echo "📝 Install commands:"
          echo "  sudo apt update"
          echo "  sudo apt install ${PACKAGE_NAME}"
          echo "=========================================="
