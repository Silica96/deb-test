name: Build and Deploy Debian Package

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: source  # 소스 코드를 source 디렉토리에 체크아웃
        
      # 2. 필요한 도구 설치
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev reprepro
          
      # 3. GPG 키 가져오기
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          
      # 4. 빌드 스크립트 실행
      - name: Build Debian package
        working-directory: source
        run: |
          #!/bin/bash
          set -e
          
          echo "=== Starting Debian package build ==="
          
          # DEBIAN/control에서 패키지 정보 추출
          PACKAGE_NAME=$(grep '^Package:' DEBIAN/control | awk '{print $2}')
          PACKAGE_VERSION=$(grep '^Version:' DEBIAN/control | awk '{print $2}')
          PACKAGE_ARCH=$(grep '^Architecture:' DEBIAN/control | awk '{print $2}')
          
          echo "Building: ${PACKAGE_NAME}_${PACKAGE_VERSION}_${PACKAGE_ARCH}"
          
          # 패키지 구조 생성
          BUILD_DIR="build_${PACKAGE_NAME}"
          rm -rf "${BUILD_DIR}"
          mkdir -p "${BUILD_DIR}"
          
          # DEBIAN 디렉토리 복사
          cp -r DEBIAN "${BUILD_DIR}/"
          
          # 파일 복사
          if [ -d "usr" ]; then
            cp -r usr "${BUILD_DIR}/"
          fi
          
          if [ -d "etc" ]; then
            cp -r etc "${BUILD_DIR}/"
          fi
          
          if [ -d "bin" ]; then
            mkdir -p "${BUILD_DIR}/usr/bin"
            cp -r bin/* "${BUILD_DIR}/usr/bin/"
            chmod +x "${BUILD_DIR}/usr/bin/"*
          fi
          
          # .deb 파일 빌드
          DEB_FILENAME="${PACKAGE_NAME}_${PACKAGE_VERSION}_${PACKAGE_ARCH}.deb"
          dpkg-deb --build "${BUILD_DIR}" "${DEB_FILENAME}"
          
          echo "Package built: ${DEB_FILENAME}"
          
          # 빌드된 파일을 상위 디렉토리로 복사
          cp "${DEB_FILENAME}" ../
          
          # 환경변수 설정
          echo "DEB_FILENAME=${DEB_FILENAME}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          
      # 5. gh-pages 브랜치 체크아웃 (별도 디렉토리)
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true  # 브랜치가 없을 수도 있음
        
      # 6. gh-pages 디렉토리 초기화 (필요시)
      - name: Initialize gh-pages directory
        run: |
          if [ ! -d "gh-pages" ]; then
            echo "Creating gh-pages directory..."
            mkdir -p gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            cd ..
          fi
          
      # 7. APT 저장소 생성/업데이트
      - name: Create/Update APT repository
        working-directory: gh-pages
        run: |
          #!/bin/bash
          set -e
          
          echo "=== Setting up APT repository ==="
          
          # .deb 파일 복사
          cp ../${DEB_FILENAME} .
          
          # reprepro 설정 디렉토리 생성
          mkdir -p conf
          
          # distributions 파일 생성
          cat > conf/distributions <<EOF
          Origin: ${GITHUB_REPOSITORY_OWNER}
          Label: ${GITHUB_REPOSITORY##*/}
          Codename: stable
          Architectures: amd64 arm64 armhf i386
          Components: main
          Description: APT repository for ${GITHUB_REPOSITORY##*/}
          SignWith: ${{ steps.import_gpg.outputs.keyid }}
          EOF
          
          # 이전 저장소 상태 정리
          if [ -d "db" ] || [ -d "dists" ] || [ -d "pool" ]; then
            echo "Cleaning previous repository state..."
            rm -rf db dists pool
          fi
          
          # 패키지 추가
          echo "Adding package to repository..."
          reprepro -V includedeb stable "${DEB_FILENAME}"
          
          # 저장소 export
          reprepro -V export
          
          echo "Repository created/updated successfully"
          
      # 8. Public GPG 키 추가
      - name: Export public GPG key
        working-directory: gh-pages
        run: |
          gpg --armor --export ${{ steps.import_gpg.outputs.keyid }} > public.key
          echo "Public GPG key exported"
          
      # 9. README 및 index.html 생성
      - name: Create documentation
        working-directory: gh-pages
        run: |
          # README.md 생성
          cat > README.md <<EOF
          # APT Repository for ${GITHUB_REPOSITORY##*/}
          
          ## Installation
          
          \`\`\`bash
          # Add GPG key
          curl -fsSL https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/public.key | sudo apt-key add -
          
          # Add repository
          echo "deb https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/ stable main" | sudo tee /etc/apt/sources.list.d/${GITHUB_REPOSITORY##*/}.list
          
          # Install package
          sudo apt update
          sudo apt install ${PACKAGE_NAME}
          \`\`\`
          
          Last updated: $(date)
          EOF
          
          # index.html 생성
          cat > index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>APT Repository - ${GITHUB_REPOSITORY##*/}</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; max-width: 800px; margin: 0 auto; padding: 40px 20px; }
                  pre { background: #f6f8fa; padding: 16px; border-radius: 6px; overflow-x: auto; }
                  code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; }
                  h1 { border-bottom: 1px solid #e1e4e8; padding-bottom: 10px; }
              </style>
          </head>
          <body>
              <h1>📦 APT Repository</h1>
              <p>Debian package repository for <strong>${GITHUB_REPOSITORY##*/}</strong></p>
              
              <h2>Quick Setup</h2>
              <pre><code># Add GPG key
          curl -fsSL https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/public.key | sudo apt-key add -
          
          # Add repository  
          echo "deb https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/ stable main" | sudo tee /etc/apt/sources.list.d/${GITHUB_REPOSITORY##*/}.list
          
          # Install package
          sudo apt update
          sudo apt install ${PACKAGE_NAME}</code></pre>
              
              <h2>Browse Repository</h2>
              <ul>
                  <li><a href="pool/">📦 Package Pool</a></li>
                  <li><a href="dists/">📋 Distributions</a></li>
                  <li><a href="public.key">🔑 GPG Public Key</a></li>
              </ul>
              
              <hr>
              <p><small>Last updated: $(date)</small></p>
          </body>
          </html>
          EOF
          
      # 10. 변경사항 커밋 및 푸시
      - name: Commit and push to gh-pages
        working-directory: gh-pages
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .
          git commit -m "Update APT repository: ${DEB_FILENAME}" || echo "No changes to commit"
          
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git 2>/dev/null || true
          git push -f origin gh-pages
          
      # 11. GitHub Pages 활성화
      - name: Enable GitHub Pages
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/pages" \
            -d '{"source":{"branch":"gh-pages","path":"/"}}' \
            2>/dev/null || echo "GitHub Pages might already be enabled"
            
      # 12. 완료 메시지
      - name: Display completion message
        run: |
          echo "=========================================="
          echo "✅ Deployment Complete!"
          echo "=========================================="
          echo "Repository URL: https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/"
          echo "Package: ${DEB_FILENAME}"
          echo "=========================================="
